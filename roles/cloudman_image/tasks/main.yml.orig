---
# file: roles/cloudman_image/tasks/main.yml
#   Build the base machine image

## System installs
# - name: Update APT cache
#   apt: update_cache=yes cache_valid_time=3600

# - name: Install required system packages
#   apt: pkg={{ item }} state=latest
#   with_items:
#     - ant
#     - atop
#     - axel
#     - bioperl
#     - cmake
#     - curl
#     - default-jdk
#     - firefox
#     - g++
#     - gcc
#     - gfortran
#     - git-core
#     - htop
#     - iftop
#     - iotop
#     - ipython
#     - libncurses5-dev
#     - libpam0g-dev
#     - libpq-dev
#     - libsparsehash-dev
#     - lubuntu-desktop
#     - make
#     - mercurial
#     - nmon
#     - openssh-server
#     - patch
#     - postgresql
#     - postgresql
#     - postgresql-client
#     - postgresql-plpython-9.3
#     - python-dev
#     - python-prettytable
#     - rsync
#     - swig
#     - sysstat
#     - unzip
#     - vim
#     - vnc4server
#     - wget
#     - zlib1g-dev

# - name: Install CloudMan-required system packages
#   apt: pkg={{ item }} state=latest
#   with_items:
#     - automake  # s3fs required
#     - build-essential  # s3fs required
#     - fail2ban
#     - fuse
#     - glusterfs-client
#     - libcurl4-openssl-dev  # s3fs required
#     - libfuse-dev  # s3fs required
#     - libfuse2
#     - libpcre3-dev
#     - libreadline6-dev
#     - libssl-dev
#     - libtool  # s3fs required
#     - libxml2-dev  # s3fs required
#     - libmunge-dev
#     - mime-support  # s3fs required
#     - munge
#     - nfs-common
#     - nfs-kernel-server
#     - pkg-config
#     - postgresql-server-dev-9.3
#     - python-pip
#     - rabbitmq-server
#     - slurm-llnl
#     - xfsprogs

# ## Library installs
# - name: Install python libs
#   pip: name={{ item }}
#   with_items:
#     - boto
#     - virtualenv

# ## Add system users
# - name: Add system groups
#   group: name={{ item }} system=yes
#   with_items:
#     - galaxy
#     - shadow

# - name: Add galaxy system user
#   user: name=galaxy shell=/bin/bash system=yes groups=galaxy,shadow uid={{ galaxy_user_uid }}

# ## Install virtualenv-burrito
# - include: install_venvburrito.yml username='galaxy' user_home='/home/galaxy'

# - include: install_venvburrito.yml username='{{ default_user }}' user_home='{{ default_user_home }}'

# ## Setup system env
# - name: Setup system-wide vimrc
#   copy: src=vimrc dest=/etc/vim/vimrc

# - name: Setup profile aliases
#   lineinfile: dest=/etc/bash.bashrc line="{{ item }}"
#   with_items:
#     - "alias 'lt=ls -ltr'"
#     - "alias 'll=ls -l'"

# - name: Download CloudMan's requirements.txt
#   get_url: url={{ cm_hg_repo }}/requirements.txt dest=/tmp/requirements.txt

# - name: Check if vburrito venv CM exists
#   sudo_user: "{{ default_user }}"
#   command: bash -l -c "lsvirtualenv | grep CM"
#   register: CM_venv_installed
#   ignore_errors: yes

# - name: Via vburrito, create a virtualenv for CloudMan (called CM)
#   sudo_user: "{{ default_user }}"
#   command: bash -l -c "mkvirtualenv -r /tmp/requirements.txt CM"
#   when: CM_venv_installed.rc == 1

# - name: Configure logrotate
#   copy: src=cloudman.logrotate dest=/etc/logrotate.d/cloudman

# - name: Copy CloudMan's ec2autorun
#   copy: src=ec2autorun.py dest=/usr/bin/ mode=0744

# - name: Configure ec2autorun as an upstart job
#   copy: src=cloudman.conf dest=/etc/init/cloudman.conf

# ## Configure desktop
# - name: Configure desktop
#   copy: src=nginx.pam dest=/etc/pam.d/nginx

# - name: Create {{ default_user_home }}/.vnc directory
#   file: path={{ default_user_home }}/.vnc state=directory

# - name: Copy script for starting X
#   copy: src=xstartup dest={{ default_user_home }}/.vnc/xstartup

# ## Install s3fs
# - name: Download s3fs
#   get_url: url=https://github.com/s3fs-fuse/s3fs-fuse/archive/v{{ s3fs_version }}.tar.gz dest=/tmp/s3fs.tar.gz

# - name: Create temporary directory
#   command: mktemp -d
#   register: tempdir

# - name: Unarchive s3fs
#   unarchive: src=/tmp/s3fs.tar.gz dest={{ tempdir.stdout }} copy=no

# - name: Install s3fs
#   command: "{{ item }} chdir='{{ tempdir.stdout }}/s3fs-fuse-{{ s3fs_version }}'"
#   with_items:
#     - ./autogen.sh
#     - ./configure --prefix=/usr
#     - make
#     - make install

# - name: Remove temporary directory
#   file: path={{ tempdir.stdout }} state=absent

# ## Install nginx
# - name: Download nginx package
#   get_url: url={{ nginx_package_url }} dest=/tmp

# - name: Install nginx package
#   command: dpkg -i /tmp/{{ nginx_package_url | basename }}
