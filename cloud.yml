---
# file: cloud.yml
#   Use this file to setup components required for Galaxy on the Cloud

# Before running roles inside this playbook, copy
# ``inventory/cloud-builder.sample`` as ``inventory/cloud-builder`` and edit it
# to provide info about your instance(s)

# To build the base image, use this role via the following command (make sure
# you provided an instance IP in ``inventory/cloud-builder`` for
# ``cloudman-image``):
#
#   % ansible-playbook -i inventory/cloud-builder cloud.yml --tags "cloudman"
#     --extra-vars vnc_password=<make_up_a_pwd> [--extra-vars cm_cleanup=true]
#
- hosts: image-builder
  # gather_facts: False  # Uncomment during dev only
  sudo: yes
  roles:
    - cloudman_image
  tags: cloudman

# To build the galaxyFS, use this role via the following command (make sure
# you provided an instance IP in ``inventory/cloud-builder`` for
# ``cloudman-instance``):
#
#   % ansible-playbook -i inventory/cloud-builder cloud.yml --tags "galaxyFS"
#     --extra-vars psql_galaxyftp_password=<make_up_a_pwd>
#
- hosts: galaxyFS-builder
  gather_facts: False  # Not making system-level changes so skip
  pre_tasks:
    - name: Assure galaxyFS dir exists
      file: path={{ galaxyFS_base_dir }} state=directory owner={{ galaxy_user_name }} group={{ galaxy_user_name }}
      sudo_user: root
    - name: Create shed tools dir
      file: state=directory path={{ galaxy_shed_tools_dir }}
    - name: Create database dir
      file: path={{ galaxy_db_dir }} state=directory owner=postgres group=postgres
      sudo_user: root
  roles:
     - role: database
       sudo: yes
       sudo_user: postgres
     - galaxyprojectdotorg.galaxy
     - trackster
  post_tasks:
    - name: Create Galaxy Install DB
      command: "{{ galaxy_venv_dir }}/bin/python {{ galaxy_server_dir }}/scripts/create_db.py -c {{ galaxy_config_file }} install chdir={{ galaxy_server_dir }}"
    - name: Set Galaxy's PYTHON_EGG_CACHE
      lineinfile: dest={{ galaxy_server_dir }}/run.sh line="export PYTHON_EGG_CACHE={{ galaxyFS_base_dir }}/.python_eggs"
  handlers:
    - name: Stop PostgreSQL
      shell: "{{ postgresql_bin_dir }}/pg_ctl -D {{ galaxy_db_dir }} stop"
      sudo: yes
      sudo_user: postgres
  sudo_user: "{{ galaxy_user_name }}"
  sudo: yes
  tags: galaxyFS
